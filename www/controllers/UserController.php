<?php

class UserController extends Role
{
	public function getRole()
	{
		return parent::getRole(); // TODO: Change the autogenerated stub
	}
	
	public function actionIndex()
	{
		$result = null;
		require_once(ROOT . '/views/admin/index.php');
		return true;
	}
	
	public function actionPageLogin()
	{
		require_once(ROOT . '/views/admin/login.php');
		return true;
	}
	
	public function actionPageRegistration()
	{
		$result = null;
		require_once(ROOT . '/views/admin/registration.php');
		return true;
	}
	
	public function actionTask()
	{
		User::checkLogged();
		User::isRole();
		
		$user = new User();
		$users = $user->getUsers();
		
		$taskObject = new Task();
		$userTasks = $taskObject->getUserTasks();
		if ($userTasks === false) {
			require_once(ROOT . '/views/admin/tasks.php');
			echo ' <h1 class="ErrorException">This user hasn`t task! </h1> ';
		} else {
			require_once(ROOT . '/views/admin/tasks.php');
			require_once(ROOT . '/views/admin/tableTasks.php');
		}
		
		return true;
	}
	
	public function actionSaveDone()
	{
		User::checkLogged();
		
		$task = new Task();
		$res = $task->saveDone();
		if ($res){
			$this->actionTask();
		}
		return true;
	}
		
	public function actionRegister()
	{
		$name = '';
		$password = '';
		$result = false;
		$errors = array();
		$data = $_POST;
		
		if (isset($data['submit'])) {
			$user = new User();
			$name = $user->checkPostData($data['name']);
			$password = $user->checkPostData($_POST['password']);

			if (!$user->checkName($name)) {
				$errors[] = 'The name can`t be shorter than 3 characters!';
			}

			if (!$user->checkPassword($password)) {
				$errors[] = 'Password mustn`t be shorter than 6 characters!';
			}

			if(!empty($user->checkUserData($name))){
				$errors[] = 'User with this login exists!';
			}
			
			if ($errors == false) {
				$result = $user->register($name, password_hash($_POST['password'], PASSWORD_DEFAULT));
			}

		}
		
		require_once(ROOT . '/views/admin/index.php');

		return true;
	}
	
	public function actionLogin()
	{
		$name = '';
		$password = '';
		$errors = array();
		$data = $_POST;
		if (isset($data['submit'])) {
			$user = new User();
			$name = $user->checkPostData($_POST['name']);
			$password = $user->checkPostData($_POST['password']);
			
			if (!$user->checkName($name)) {
				$errors[] = 'The name can`t be shorter than 3 characters!';
			}
			$dataUser = $user->checkUserData($name);
			if(!empty($dataUser)){
				if(password_verify($password, $dataUser['password'])){
					User::auth($dataUser);
					
					if (empty(User::isRole())){
						header("Location: /page/error");
						return true;
					}
					
					header("Location: /page/task");
					return true;
				}else{
					$errors[] = 'Invalid password!';
				}
			}else{
				$errors[] = 'User with such login is not found!';
			}
		}
		require_once(ROOT . '/views/admin/login.php');
			return true;
	}
	
	/**
	 * delete user from session
	 */
	public function actionLogout()
	{
		unset($_SESSION['logged_user_id']);
		unset($_SESSION['logged_user_name']);
		unset($_SESSION['logged_user_role']);
		header("Location: /page/login");
		return true;
	}
	
	public function actionSaveExecutor()
	{
		if ($this->getRole() !== "father") {
			header("Location: /page/error");
			return true;
		}

		$task = new Task();
		$result = $task->addExecuter();
		
		header("Location: /page/distribute");
		return true;
	}
	
	public function actionError()
	{
		require_once(ROOT . '/views/admin/access.php');
		return true;
	}
	
	public function actionDistributeTask()
	{
		User::checkLogged();
		if ($this->getRole() !== "father") {
			header("Location: /page/error");
			return true;
		}
		
		$user = new User();
		$users = $user->getUsers();
		
		$task = new Task();
		$arrTasks = $task->getDataTasks();
		
		require_once(ROOT . '/views/admin/tasks.php');
		if (!empty($arrTasks)){
			require_once(ROOT . '/views/admin/editTasks.php');
		}else{
			echo ' <h1 class="ErrorException">No tasks for distribute! </h1> ';
		}
		return true;
	}
	
	public function actionAllTasks()
	{
		User::checkLogged();
				
		$taskObject = new Task();
		$allTasks = $taskObject->getAllTask();
		if ($allTasks === false) {
			require_once(ROOT . '/views/admin/tasks.php');
			echo ' <h1 class="ErrorException">No tasks! </h1> ';
		} else {
			require_once(ROOT . '/views/admin/tasks.php');
			require_once(ROOT . '/views/admin/viewAllTasks.php');
		}
		
		return true;
	}
}